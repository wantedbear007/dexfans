type CanisterMetaData = record {
  controllers : vec principal;
  canister_ids : vec record { nat8; principal };
  all_post_canisters : vec principal;
  payment_recipient : principal;
  membership_plans : vec record { Membership; nat64 };
};
type CommentNotificationArgs = record {
  post_url : text;
  post_owner : principal;
  description : text;
};
type DexFansCanisterInitArgs = record {
  controllers : vec principal;
  canister_ids : vec record { text; principal };
  payment_recipient : principal;
  membership_plans : vec record { Membership; nat64 };
};
type LikeNotificationArgs = record { post_url : text; post_owner : principal };
type Membership = variant { Guest; Gold; Platinum; Silver };
type NotificationBody = record {
  by : opt principal;
  title : text;
  description : opt text;
  created_on : nat64;
  category : NotificationType;
  expiring_on : nat64;
};
type NotificationType = variant {
  NewComment;
  NewLike;
  NewPost;
  NewSubscribingPost;
  NewSubscriber;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : principal; Err : text };
type Result_2 = variant { Ok : text; Err : text };
type Result_3 = variant { Ok : UserProfile; Err : text };
type Result_4 = variant { Ok : CanisterMetaData; Err : text };
type SubscribeAccountIC = record {
  subscribed_by : principal;
  subscribed_to : principal;
};
type UnsubscribeAccountIC = record {
  unsubscribed_by : principal;
  unsubscribed_to : principal;
};
type UserInputArgs = record {
  bio : opt text;
  username : text;
  cover_image : opt text;
  avatar : opt text;
};
type UserProfile = record {
  bio : opt text;
  username : text;
  asset_canister_id : principal;
  cover_image : opt text;
  membership_ledger_block : opt nat;
  membership_till : nat64;
  created_at : nat64;
  user_id : principal;
  is_bot : bool;
  likes : vec nat;
  active_post_canister : principal;
  subscribers : vec principal;
  subscribing : vec principal;
  membership : Membership;
  posts : vec nat;
  collects : vec nat;
  all_post_canisters : vec principal;
  avatar : opt text;
};
service : (DexFansCanisterInitArgs) -> {
  admin_add_controller : (principal) -> (Result);
  admin_remove_controller : (principal) -> (Result);
  admin_set_post_canister : (principal) -> (Result_1);
  api_add_post_id_to_user : (principal, nat) -> (Result);
  api_create_account : (UserInputArgs) -> (Result_2);
  api_get_my_profile : () -> (Result_3) query;
  api_get_notifications : () -> (vec NotificationBody) query;
  api_get_subscribed : () -> (vec principal) query;
  api_get_subscribers : () -> (vec principal) query;
  api_purchase_membership : (Membership) -> (Result);
  api_subscribe_account : (principal) -> (Result);
  api_unsubscribe_account : (principal) -> (Result);
  api_update_membership : (Membership) -> (Result);
  api_update_profile : (UserInputArgs) -> (Result);
  api_update_user_likes : (principal, nat, bool) -> (Result);
  create_post_canister : () -> (Result_1);
  get_asset_canister : () -> (Result_1) query;
  get_canister_meta_data : () -> (Result_4) query;
  get_ledger_canister : () -> (Result_1) query;
  get_post_canister : () -> (Result_1) query;
  greet : (text) -> (text) query;
  ic_subscribe_account : (SubscribeAccountIC) -> (Result);
  ic_unsubscribe_account : (UnsubscribeAccountIC) -> (Result);
  ic_update_membership : (Membership) -> (Result);
  notify_comments : (CommentNotificationArgs) -> (Result);
  notify_likes : (LikeNotificationArgs) -> (Result);
  notify_subscribers_newpost : () -> (Result);
}
