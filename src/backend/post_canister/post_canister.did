type CanisterMetaData = record {
  controllers : vec principal;
  canister_ids : vec record { text; principal };
};
type CommentBody = record {
  creator : principal;
  content : text;
  created_at : nat64;
  comment_id : nat;
};
type CreatePostArgs = record {
  content : text;
  video : opt Video;
  post_visibility : PostVisibility;
  image : opt vec Video;
  price : opt nat;
  post_status : PostStatus;
};
type GetByPostStatusArgs = record {
  status : PostStatus;
  pagination : Pagination;
};
type Membership = variant { Diamond; Guest };
type Pagination = record { end : nat64; start : nat64 };
type Post = record {
  views_count : nat64;
  post_id : nat;
  content : text;
  creator_id : principal;
  video : opt Video;
  views : vec principal;
  like_count : nat64;
  post_visibility : PostVisibility;
  created_at : nat64;
  likes : vec principal;
  image : opt vec Video;
  comments_count : nat64;
  price : opt nat;
  post_status : PostStatus;
};
type PostCanisterInitArgs = record {
  controllers : vec principal;
  canister_ids : vec record { text; principal };
  accounts : vec UserProfile;
};
type PostPagination = record { end : nat64; post_id : nat; start : nat64 };
type PostPurchaseArgs = record { post_id : nat; created_by : principal };
type PostStatus = variant { Draft; Archived; Published };
type PostVisibility = variant { DiamondUser; Everyone };
type PurchaseUserMedia = record { amt : nat; owner : principal };
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : text; Err : text };
type Result_2 = variant { Ok : nat; Err : text };
type Result_3 = variant { Ok : Post; Err : text };
type Result_4 = variant { Ok : UserProfileIC; Err : text };
type Result_5 = variant { Ok : CanisterMetaData; Err : text };
type Result_6 = variant { Ok : PurchaseUserMedia; Err : text };
type SinglePurchaseArgs = record {
  post_id : nat;
  created_by : principal;
  media_id : text;
};
type UpdateMembershipIC = record { user : principal; membership : Membership };
type UpdatePostArgs = record {
  id : nat;
  content : text;
  video : opt Video;
  post_visibility : PostVisibility;
  image : opt vec Video;
  price : opt nat;
  post_status : PostStatus;
};
type UpdateUserProfileArgsIC = record { username : text; user_id : principal };
type UserProfile = record {
  username : text;
  user_id : principal;
  membership : Membership;
};
type UserProfileIC = record {
  username : text;
  user_id : principal;
  likes : vec nat;
  membership : Membership;
  posts : vec nat;
  collects : vec nat;
};
type Video = record { need_pay : bool; source : text; price : opt nat };
service : (PostCanisterInitArgs) -> {
  admin_add_user_profile : (UserProfileIC) -> (Result);
  admin_update_membership : (UpdateMembershipIC) -> (Result);
  admin_update_user_profile : (UpdateUserProfileArgsIC) -> (Result);
  api_archive_post : (UpdatePostArgs) -> (Result_1);
  api_comment_on_post : (nat, text) -> (Result_1);
  api_create_new_post : (CreatePostArgs) -> (Result_2);
  api_delete_post : (nat) -> (Result_1);
  api_get_latest_posts : (Pagination) -> (vec Post) query;
  api_get_my_posts : (Pagination) -> (vec Post) query;
  api_get_post_by_id : (nat) -> (Result_3);
  api_get_post_by_status : (GetByPostStatusArgs) -> (vec Post) query;
  api_get_post_comments : (PostPagination) -> (vec CommentBody) query;
  api_get_subscribed_posts : (Pagination) -> (vec Post);
  api_like_unlike_post : (nat) -> (Result_1);
  api_post_by_user_id : (principal, Pagination) -> (vec Post) query;
  api_save_post : (UpdatePostArgs) -> (Result_1);
  api_search_post : (text) -> (vec Post) query;
  api_update_post : (UpdatePostArgs) -> (Result_1);
  debug_get_all_profile : () -> (vec UserProfileIC) query;
  debug_get_user_profile : () -> (Result_4) query;
  debug_total_posts : () -> (nat) query;
  get_canister_meta_data : () -> (Result_5) query;
  greet : (text) -> (text) query;
  ic_get_media_price : (SinglePurchaseArgs) -> (Result_6) query;
  ic_get_price : (PostPurchaseArgs) -> (Result_6) query;
}
